sql_stmt_list: ";"* (sql_stmt _SEMI+)+

sql_stmt: select_stmt
        | create_table_stmt
        | insert_stmt
        | update_stmt
        | delete_stmt

select_stmt.1: k_select k_distinct? subquery_or_expr_as \
                ("," subquery_or_expr_as)* from_clause? \
                where_clause? order_by_clause? limit_clause? offset_clause?

create_table_stmt.1: k_create k_table table_name LPAREN column_def_list RPAREN

insert_stmt: k_insert k_into table_name (LPAREN column_list RPAREN)? k_values values_list

update_stmt: k_update table_name k_set column_name EQUAL VALUE \
                (COMMA column_name EQUAL VALUE)* where_clause?

delete_stmt: k_delete k_from table_name where_clause?

column_list: NAME (COMMA NAME)*

values_list: value_tuple (COMMA value_tuple)*

value_tuple: LPAREN VALUE (COMMA VALUE)* RPAREN

// include VALUE to ensure semicolons in strings are handled properly
// use column_name to match any unidentified keyword or column name
unexpected_stmt.0: (ERR | VALUE | LPAREN unexpected_stmt RPAREN) +

ERR.0: /.+?/

subquery_or_expr_as: subquery_or_expr (k_as NAME)?

subquery_or_expr: LPAREN (select_stmt) RPAREN | expr

from_clause: k_from subquery_or_expr_as join_clause*

column_def_list: NAME sql_type? (COMMA NAME sql_type?)*

join_clause: k_join NAME (k_on expr)?

where_clause: k_where expr

order_by_clause: k_order k_by column_name (k_asc | k_desc)

limit_clause: k_limit POS_INT

offset_clause: k_offset POS_INT

// TODO: expand expr. e.g. add EXISTS. Allow queries in expr (e.g. 3494.sql)
// expr_helper resolves shift/reduce conflicts by forcing right associativity
expr: k_not? (expr_helper operator expr | expr_helper)

expr_helper: LPAREN expr RPAREN
           | column_name
           | VALUE
           | k_cast LPAREN expr k_as sql_type RPAREN
           | k_nullif LPAREN expr ("," expr)+ RPAREN

any_word: table_name "." NAME | NAME

// TODO: fix table names with prefix (e.g main.t0). see 9215.sql
table_name: NAME
column_name: table_name "." NAME
           | NAME
           | STAR

// TODO: check what names are allowed and how values are specified
name_or_value: NAME
             | VALUE

sql_type: NAME ("("VALUE ")")?

// TODO: add more operators
operator: PLUS | MINUS | STAR | SLASH | EQUAL | GREATER | LESS | k_is | k_or | k_and

// force anonymous literals to appear in tree with ! prefix
!k_select: "SELECT" | "select"
!k_update: "UPDATE" | "update"
!k_create: "CREATE" | "create"
!k_table: "TABLE" | "table"
!k_from: "FROM" | "from"
!k_on: "ON" | "on"
!k_join: "JOIN" | "join"
!k_where: "WHERE" | "where"
!k_limit: "LIMIT" | "limit"
!k_distinct: "DISTINCT" | "distinct"
!k_as: "AS" | "as"
!k_is: "IS" | "is"
!k_or: "OR" | "or"
!k_offset: "OFFSET" | "offset"
!k_cast: "CAST" | "cast"
!k_nullif: "NULLIF" | "nullif"
!k_insert: "INSERT" | "insert"
!k_into: "INTO" | "into"
!k_values: "VALUES" | "values"
!k_set: "SET" | "set"
!k_delete: "DELETE" | "delete"
!k_not: "NOT" | "not"
!k_and: "AND" | "and"
!k_order: "ORDER" | "order"
!k_by: "BY" | "by"
!k_asc: "ASC" | "asc"
!k_desc: "DESC" | "desc"

PLUS: "+"
MINUS: "-"
STAR: "*"
SLASH: "/"
EQUAL: "="
GREATER: ">"
LESS: "<"

LPAREN: "("
RPAREN: ")"

NAME.2: /[a-zA-Z_]/ /[a-zA-Z0-9_]*/

VALUE.2: /'([^']|'')*'/
       | ("+"|"-")? /[0-9]+/ /(\.[0-9]*)/?
       | "NULL"
       | "null"

POS_INT: /[0-9]+/

_SEMI: ";"
COMMA: ","

%import common.WS
%ignore WS